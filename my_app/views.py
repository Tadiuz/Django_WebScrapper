from django.shortcuts import render
from bs4 import BeautifulSoup
import requests
from requests.compat import quote_plus

from . import models


BASE_CRAIGLIST_URL = 'https://losangeles.craigslist.org/search/?query={}'

BASE_IMAGE_URL = 'https://images.craigslist.org/{}_300x300.jpg'

# Create your views here.

def home(request):
    return render(request, 'base.html')


def new_search(request):

    search = request.POST.get('search')

    #Here we are creating and object create of Search and the data that we are feeding into it it is the search variable that we definied here
    models.Search.objects.create(search=search)
    #The quote_plus is for give fomrat to the search filed like if we search something like python tutotr we want it to be python+tutor
    final_url = BASE_CRAIGLIST_URL.format(quote_plus(search))

    response = requests.get(final_url)

    data = response.text

    #Here we are creting a  Beautiful soup opnecjt, we are passing the data obeject wich contains all the html file generated by the search we did before, then 
    #we are saying tha we want a html parser
    soup = BeautifulSoup(data, features='html.parser')

    #Here we are fnind all the links where the class is names 'result-title' this will give us alll the links found it by the web scrapper
    

    #Here we are getting all the infromation in the post_listings and from it we are getting the pricr, the tittle and the url
    
    post_listings = soup.find_all('li', {'class': 'result-row'})
    """
    post_title = post_listings[0].find('class_=': 'result-title').text

    post_url = post_listings[0].find('a').get('href')

    post_price = post_listings[0].find('class_=': 'result-price').text
    """
    final_postings = []

    for post in post_listings:

        post_title = post.find(class_= 'result-title').text
        post_url = post.find('a').get('href')

        if post.find(class_= 'result-price'):

            post_price = post.find(class_= 'result-price').text
        else:
            post_price = 'N/A'


        #Part to see if the publicaction has an image

        if post.find(class_= 'result-image').get('data-ids'):
            post_image_id = post.find(class_= 'result-image').get('data-ids').split(',')[0].split(':')[1]

            post_image_url = BASE_IMAGE_URL.format(post_image_id)
            print(post_image_url)
        else:

            post_image_url = 'https://images.craigslist.org/00I0I_aIakBXIFkgC_0CI0t2_300x300.jpg'


        final_postings.append((post_title, post_url, post_price,post_image_url))


    





    stuff_for_frontend = {
        'search': search,
        'final_postings' : final_postings,



    }

    return render(request, 'my_app/new_search.html', stuff_for_frontend)